{"ast":null,"code":"var _jsxFileName = \"/Users/pkindev-pm/Desktop/parentheses/generateParentheses/my-app/src/App.js\";\nimport React from 'react'; //import logo from './logo.svg';\n//import './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.generate = () => {\n      const {\n        number\n      } = this.state;\n\n      if (number !== '') {\n        const typeA = this.generateTypeA(parseInt(number));\n        const typeB = this.generateTypeB(parseInt(number));\n        const typeC = this.generateTypeC(parseInt(number));\n        const typeD = this.generateTypeD(parseInt(number));\n        const typeE = this.generateTypeE(parseInt(number));\n        this.setState({\n          data: [typeA, typeB, typeC, typeD, typeE]\n        });\n      }\n    };\n\n    this.generateTypeA = number => {\n      let open = number;\n      let close = number;\n      let result = '';\n\n      while (open !== 0 || close !== 0) {\n        if (open >= close && open !== 0) {\n          result = result.concat('(');\n          --open;\n        } else {\n          result = result.concat(')');\n          --close;\n        }\n\n        if (open < -10 || close < -10) break;\n      }\n\n      ;\n      return result;\n    };\n\n    this.generateTypeB = number => {\n      let open = number;\n      let close = number;\n      let result = '';\n\n      while (open > 0 || close > 0) {\n        if (open !== 0) {\n          result = result.concat('(');\n          --open;\n        } else {\n          result = result.concat(')');\n          --close;\n        }\n      }\n\n      return result;\n    };\n\n    this.generateTypeC = number => {\n      let open = number;\n      let close = number;\n      let result = '';\n      let i = 2;\n\n      if (number >= 2) {\n        while (open > 0 || close > 0) {\n          if (i > 0) {\n            result = result.concat('(');\n            --i;\n            --open;\n          } else if (i === 0) {\n            result = result.concat(')');\n            --close;\n            --i;\n          } else {\n            if (Math.abs(open - close) === 2 || open === 0) {\n              result = result.concat(')');\n              --close;\n            } else {\n              result = result.concat('(');\n              --open;\n            }\n          }\n        }\n      } else if (number === 1) {\n        result = '()';\n      }\n\n      return result;\n    };\n\n    this.generateTypeD = number => {\n      let num = number;\n      let open = 1;\n      let close = 1;\n      let result = '';\n\n      if (num > 0) {\n        --num;\n\n        while (close > 0 || open > 0) {\n          if (open >= close && open > 0) {\n            result = result.concat('(');\n            --open;\n          } else {\n            result = result.concat(')');\n            --close;\n          }\n        }\n\n        if (num > 0) result = result.concat(this.generateTypeB(parseInt(num)));\n        return result;\n      } else {\n        return result;\n      }\n    };\n\n    this.generateTypeE = number => {\n      let num = number;\n      let open = 1;\n      let close = 1;\n      let result = '';\n\n      if (num > 0) {\n        --num;\n\n        while (close > 0 || open > 0) {\n          if (open >= close && open > 0) {\n            result = result.concat('(');\n            --open;\n          } else {\n            result = result.concat(')');\n            --close;\n          }\n        }\n\n        if (num > 0) result = this.generateTypeB(parseInt(num)).concat(result);\n        return result;\n      } else {\n        return result;\n      }\n    };\n\n    this.changeState = (state, value) => {\n      this.setState({\n        [state]: value\n      });\n    };\n\n    this.state = {\n      data: [],\n      number: 0\n    };\n  }\n\n  render() {\n    const {\n      number\n    } = this.state;\n    console.log('this', this.state.data);\n    return (// <div >\n      //     <h1>{this.state.data}</h1>\n      //     <p\n      //     onClick={this.generateTypeA()}\n      //     >\n      //       Learn React\n      //   </p>\n      // </div>\n      React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"result\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, this.state.data.toString()), React.createElement(\"input\", {\n        value: number,\n        type: \"number\",\n        onChange: e => this.changeState('number', e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.generate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Submit\"))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pkindev-pm/Desktop/parentheses/generateParentheses/my-app/src/App.js"],"names":["React","App","Component","constructor","props","generate","number","state","typeA","generateTypeA","parseInt","typeB","generateTypeB","typeC","generateTypeC","typeD","generateTypeD","typeE","generateTypeE","setState","data","open","close","result","concat","i","Math","abs","num","changeState","value","render","console","log","toString","e","target"],"mappings":"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","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      number: 0\n    }\n  }\n  generate = () => {\n    const { number } = this.state;\n    if (number !== '') {\n      const typeA = this.generateTypeA(parseInt(number));\n      const typeB = this.generateTypeB(parseInt(number));\n      const typeC = this.generateTypeC(parseInt(number));\n      const typeD = this.generateTypeD(parseInt(number));\n      const typeE = this.generateTypeE(parseInt(number));\n\n      this.setState({\n        data: [typeA, typeB, typeC, typeD, typeE]\n      })\n    }\n\n  }\n  generateTypeA = (number) => {\n    let open = number;\n    let close = number;\n    let result = '';\n    while (open !== 0 || close !== 0) {\n      if (open >= close && open !== 0) {\n        result = result.concat('(')\n        --open;\n      } else {\n        result = result.concat(')')\n        --close;\n      }\n      if (open < -10 || close < -10)\n        break;\n    };\n    return result;\n  }\n  generateTypeB = (number) => {\n    let open = number;\n    let close = number;\n    let result = '';\n    while (open > 0 || close > 0) {\n      if (open !== 0) {\n        result = result.concat('(')\n        --open;\n      } else {\n        result = result.concat(')')\n        --close;\n      }\n    }\n    return result;\n  }\n  generateTypeC = (number) => {\n    let open = number;\n    let close = number;\n    let result = '';\n    let i = 2;\n    if (number >= 2) {\n      while (open > 0 || close > 0) {\n        if (i > 0) {\n          result = result.concat('(');\n          --i;\n          --open;\n        } else if (i === 0) {\n          result = result.concat(')')\n          --close;\n          --i\n        } else {\n          if (Math.abs(open - close) === 2 || open === 0) {\n            result = result.concat(')')\n            --close;\n\n          } else {\n            result = result.concat('(')\n            --open;\n          }\n        }\n      }\n    } else if (number === 1) {\n      result = '()';\n    }\n    return result;\n  }\n  generateTypeD = number => {\n    let num = number;\n    let open = 1; \n    let close = 1;\n    let result = '';\n\n    if (num > 0) {\n      --num;\n      while (close > 0 || open > 0) {\n        if (open >= close && open > 0) {\n          result = result.concat('(');\n          --open;\n        }else{\n          result = result.concat(')');\n          --close;\n        }\n      }\n\n      if (num > 0)\n        result = result.concat(this.generateTypeB(parseInt(num)));\n\n      return result;\n    } else {\n      return result;\n    }\n  }\n  generateTypeE = number => {\n    let num = number;\n    let open = 1;\n    let close = 1;\n    let result = '';\n\n    if (num > 0) {\n      --num;\n      while (close > 0 || open > 0) {\n        if (open >= close && open > 0) {\n          result = result.concat('(');\n          --open;\n        } else {\n          result = result.concat(')');\n          --close;\n        }\n      }\n\n      if (num > 0)\n        result = this.generateTypeB(parseInt(num)).concat(result);\n\n      return result;\n    } else {\n      return result;\n    }\n  }\n  changeState = (state, value) => {\n    this.setState({\n      [state]: value\n    })\n  }\n  render() {\n    const { number } = this.state;\n    console.log('this', this.state.data)\n    return (\n      // <div >\n      //     <h1>{this.state.data}</h1>\n      //     <p\n      //     onClick={this.generateTypeA()}\n      //     >\n      //       Learn React\n      //   </p>\n      // </div>\n      <div className='App'>\n        <h1>\n          result\n       </h1>\n        <h3>\n          {this.state.data.toString()}\n        </h3>\n        <input value={number} type='number' onChange={e => this.changeState('number', e.target.value)}>\n        </input>\n        <button onClick={this.generate}>\n          Submit\n       </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}